// pusoydos with no error checking :D
// all inputs will be valid except possibly for card combination moves
// only check if move can be made considering previous move
// and whether combination is valid
// assume combination does not contain duplicates

// setup global variables
enum suits {
    CLUBS, SPADES, HEARTS, DIAMONDS
}
string values[13] = {"3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A", "2"};
Player.lastMove = new Pile;

Pile deck, discard;
int nPlayers = 4;
Player players[nPlayers];
deck = Combination {
    suit: suits,
    value: values
};
int turn = 0;
int controlPlayer = -1;
Pile prevMove;

Shuffle deck;
Deal 13 From deck To players;

// check who has 3 of clubs here
repeat 4 {
    int found = 0;
    foreach (card: players[turn].hand) {
        if (card.suit == suits.CLUBS and card.value == "3") found = 1;
    }
    if (found) break;
    turn = turn + 1;
}
controlPlayer = turn;

function DisplayBoard() {
    Println("Turn of Player " + (turn + 1));
    int i = 0;
    repeat (nPlayers) {
        if (turn != i) {
            Println("");
            Println("Player " + (i + 1) + " has " + players[i].hand.count + " cards.");
            if (players[i].lastMove == null) Println("Player " + (i + 1) + " passed last turn.");
            else if (players[i].lastMove.count == 0) Println("Player " + (i + 1) + " has not moved yet.");
            else {
                Println("Previous move of player " + (i + 1) + ":");
                foreach (card: players[i].lastMove) {
                    Println(card.value + " of " + card.suit);
                }
            }
        }
        i = i + 1;
    }
    
    if (prevMove.count > 0) {
        Println("");
        Println("Last move by Player " + (controlPlayer + 1) + ":");
        foreach (card: prevMove) {
            Println(card.value + " of " + card.suit);
        }
    }

    Println("");
    Println("Your Cards:");
    i = 0;
    foreach (card: players[turn].hand) {
        Println(i + " - " + card.value + " of " + card.suit);
        i = i + 1;
    }
}

function getValueIndex(string value) {
    int idx = 0;
    repeat 13 {
        if (value == values[idx]) return idx;
        idx = idx + 1;
    }
    return -1;
}

function getSuitIndex(string suit) {
    if (suit == suits.CLUBS) return 0;
    if (suit == suits.SPADES) return 1;
    if (suit == suits.HEARTS) return 2;
    if (suit == suits.DIAMONDS) return 3;
    return -1;
}

function getSuit(int idx) {
    if (idx == 0) return suits.CLUBS;
    if (idx == 1) return suits.SPADES;
    if (idx == 2) return suits.HEARTS;
    if (idx == 3) return suits.DIAMONDS;
    return "joker";
}

// check what type of 5 card combination
function checkCombination(Pile currMove) {
    int valueCnt[13], suitCnt[4];
    foreach (card: currMove) {
        int valueIdx = getValueIndex(card.value);
        int suitIdx = getSuitIndex(card.suit);
        valueCnt[valueIdx] = valueCnt[valueIdx] + 1;
        suitCnt[suitIdx] = suitCnt[suitIdx] + 1;
    }

    int i;
    int flush = -1, straight = -1;
    int quad = -1, trio = -1, pair = -1;
    
    // check straight and duplicates
    i = 0;
    repeat 13 {
        if (valueCnt[i] == 4) quad = i;
        else if (valueCnt[i] == 3) trio = i;
        else if (valueCnt[i] == 2) pair = i;

        int j = 0;
        int flag = 1;
        repeat 5 {
            if (valueCnt[(i + j) % 13] != 1) flag = 0;
            j = j + 1;
        }
        if (flag) straight = (i + 4) % 13;
        i = i + 1;
    }

    // check flush
    i = 0;
    repeat 4 {
        if (suitCnt[i] == 5) flush = i;
        i = i + 1;
    }

    if (flush != -1) {
        Card best = { suit: getSuit(flush) };
        if (straight != -1) {
            best.value = values[straight];
            string combi = "straight flush";
            if (values[straight] == "A") combi = "royal flush";
            best.combi = combi;
            return best;
        }
        i = 12;
        repeat 13 {
            if (valueCnt[i] == 0) {
                i = i - 1;
                continue;
            }
            best.value = values[i];
            best.combi = "flush";
            return best;
        }
    }
    if (straight != -1) {
        Card best = { value: values[straight], combi: "straight" };
        foreach (card: currMove) {
            if (card.value == best.value) {
                best.suit = card.suit;
                return best;
            }
        }
    }

    // check four of a kind
    if (quad != -1) {
        Card best = { value: values[quad], suit: suits.DIAMONDS, combi: "quad" };
        return best;
    }

    // check full house
    if (trio != -1 and pair != -1) {
        Card best = { value: values[trio], suit: suits.DIAMONDS, combi: "full house" };
        return best;
    }
}

function compareCards(Card card1, Card card2) {
    // return 1 if card1 is better
    int valueIdx1 = getValueIndex(card1.value);
    int valueIdx2 = getValueIndex(card2.value);
    if (valueIdx1 != valueIdx2) return valueIdx1 > valueIdx2;

    int suitIdx1 = getSuitIndex(card1.suit);
    int suitIdx2 = getSuitIndex(card2.suit);
    return suitIdx1 > suitIdx2;
}

function checkMove(Pile currMove) {
    int n = currMove.count;
    if (n == 1) {
        if (prevMove == null) return 1;
        return compareCards(currMove[0], prevMove[0]);
    }
    if (n == 2 or n == 3) {
        string value = currMove[0].value;
        foreach (card: currMove) {
            if (card.value == value) continue;
            return 0;
        }
        if (prevMove == null) return 1;
        Card card1 = currMove[0], card2 = prevMove[0];
        if (compareCards(currMove[1], card1)) card1 = currMove[1];
        if (compareCards(prevMove[1], card2)) card2 = prevMove[1];
        if (n == 3) {
            if (compareCards(currMove[2], card1)) card1 = currMove[2];
            if (compareCards(prevMove[2], card2)) card2 = prevMove[2];
        }
        return compareCards(card1, card2);
    }

    // call checkCombination
    Card card1 = checkCombination(currMove);
    if (card1 == null) return 0;
    if (prevMove == null) return 1;

    Card card2 = checkCombination(prevMove);
    string combis[6] = {"straight", "flush", "full house", "quad", "straight flush", "royal flush"};
    int i = 0;
    int idx1 = -1, idx2 = -1;
    repeat 6 {
        if (card1.combi == combis[i]) idx1 = i;
        if (card2.combi == combis[i]) idx2 = i;
    }

    if (idx1 != idx2) return idx1 > idx2;
    return compareCards(card1, card2);
}

function getInput() {
    if (turn == controlPlayer) {
        Print("You have control. How many cards will you play? ");
        int x = GetInt; // assume this is valid i.e. 1,2,3,5 and x < count of player's hand
        
        prevMove = null;
        Pile currMove;
        repeat until currMove.count == x {
            Println("");
            Println("Input " + x + " line-separated card indices:");
            repeat x {
                Card card = Pick From players[turn].hand;
                currMove = currMove + card;
            }
            int check = checkMove(currMove);
            if (check) return currMove;
            currMove = new Pile;
            Println("Invalid combination of cards.");
        }
    }

    // regular turn
    // player should pass if cannot play a move
    Print("Will you play a move [Y/N]? ");
    string res = GetString;
    if (res == "N") return;

    // get move
    Pile currMove;
    int x = prevMove.count;
    repeat until currMove.count == x {
        Println("");
        Println("Input " + x + " line-separated card indices: ");
        repeat x {
            Card card = Pick From players[turn].hand;
            currMove = currMove + card;
        }
        int check = checkMove(currMove);
        if (check) return currMove;
        currMove = new Pile;
        Println("Invalid combination of cards or combination is weaker than previous move.");
    }
}

Round {
    DisplayBoard();

    // get input
    Pile currMove = getInput();
    players[turn].lastMove = currMove;

    // pass
    if (currMove == null) {
        turn = (turn + 1) % nPlayers;
    } else {
        // play move
        foreach (card: currMove) {
            players[turn] Play card To discard;
        }

        // check if game ends
        if (players[turn].hand.count == 0) {
            Println("Player " + (turn + 1) + " wins!");
            End;
        }

        // update turn, controlPlayer, prevMove
        controlPlayer = turn;
        prevMove = currMove;
        turn = (turn + 1) % nPlayers;
    }
}